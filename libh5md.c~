#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "hdf5.h"
#include "hdf5_hl.h"
#include "libh5md.h"

//global varible
int position_already_read_lib =-1;

void *open_h5md_read_lib(const char *filename, const char *filetype, int *natoms) {
	h5mddata_lib *data;
	data = (h5mddata_lib *) malloc(sizeof(h5mddata_lib));

	hid_t file_id = H5Fopen(filename, H5F_ACC_RDONLY, H5P_DEFAULT);
	hid_t dataset_id = H5Dopen(file_id, "/particles/atoms/position/value",H5P_DEFAULT);

	//get dims
	hid_t dataspace = H5Dget_space(dataset_id);
	unsigned long long int dims_out[3];
	H5Sget_simple_extent_dims(dataspace, dims_out, NULL );

	//save repeatedly needed files in h5mddata_lib struct 
	data->file_name = filename;
	data->ntime = dims_out[0];
	data->natoms = dims_out[1];
	*natoms = data->natoms;
	data->nspacedims = dims_out[2];
	return data;	
}

void get_xyz_lib(void *mydata, int atom_nr, int time_i, double xyz_array[3], double*** data_xyz) {
	//IN: *mydata, atom_nr, time_i
	//OUT: xyz_array[3]
	
	//h5mddata_lib *data = (h5mddata_lib *) mydata;

	xyz_array[0] = data_xyz[time_i][atom_nr][0];
	xyz_array[1] = data_xyz[time_i][atom_nr][1];
	xyz_array[2] = data_xyz[time_i][atom_nr][2];

}


void read_position_lib(h5mddata_lib *data){
	//read position data to data_xyz_read
	double data_xyz_read[data->ntime][data->natoms][data->nspacedims];
	H5Dread(data->dataset_id, H5T_NATIVE_DOUBLE, H5S_ALL, H5S_ALL, H5P_DEFAULT, data_xyz_read[0]);
	//allocate memory for data_xyz
	double *** data_xyz = (double ***)malloc(data->ntime*sizeof(double**));

        for (int i = 0; i< data->ntime; i++) {
        	data_xyz[i] = (double **) malloc(data->natoms*sizeof(double *));
        	for (int j = 0; j < data->natoms; j++) {
         		data_xyz[i][j] = (double *)malloc(3*sizeof(double));
        	}
        }
	//copy data of data_xyz_read to data_xyz on heap
        for (int i = 0; i< data->ntime; i++) {
        	for (int j = 0; j < data->natoms; j++) {
         		data_xyz[i][j][0]=data_xyz_read[i][j][0];
			data_xyz[i][j][1]=data_xyz_read[i][j][1];
			data_xyz[i][j][2]=data_xyz_read[i][j][2];
        	}
        }
	data->data_xyz=data_xyz;
}

int read_h5md_timestep_lib(void *mydata, int natoms, double *** data_xyz, int time_i) {
	double x, y, z;

	h5mddata_lib *data = (h5mddata_lib *) mydata;
	
	if(position_already_read_lib<0){
		read_position_lib(data);
		position_already_read_lib=1;
	}
	
	/* read the coordinates */
	unsigned int ntime = data->ntime;
	if (time_i >= ntime - 1) {
		return -1;
	}
	for (int i = 0; i < natoms; i++) {
		double xyz_array[3];
		get_xyz_lib(data, i, time_i, xyz_array,data_xyz);
		x = xyz_array[0];
		y = xyz_array[1];
		z = xyz_array[2];

		if (data_xyz != NULL ) {
			data_xyz[time_i][i][0] = x;
			data_xyz[time_i][i][1] = y;
			data_xyz[time_i][i][2] = z;
		} else {
			break;
		}
	}

	return 1;
}

h5mddata_lib* read_position_of_file(const char *filename){
  h5mddata_lib *data = open_h5md_read_lib(filename, NULL, NULL);
	double *** data_xyz = (double ***)malloc(data->ntime*sizeof(double**));

        for (int i = 0; i< data->ntime; i++) {
        	data_xyz[i] = (double **) malloc(data->natoms*sizeof(double *));
        	for (int j = 0; j < data->natoms; j++) {
         		data_xyz[i][j] = (double *)malloc(3*sizeof(double));
        	}
        }
  for(int time_i=0;time_i<data->ntime;time_i++){
    read_h5md_timestep_lib(data,data->natoms,data_xyz, time_i);
  }
  data->ndims=data->ndims;
  data->nspacedims=data->nspacedims;
  data->data_xyz=data_xyz;
  
  return data;
}
